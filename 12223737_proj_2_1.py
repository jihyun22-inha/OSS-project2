# -*- coding: utf-8 -*-
"""12223737_Proj#2-1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Y9sjGq8f6eIJEsyTCuQ5Hok8Cea3_UGA
"""

import pandas as pd

data = pd.read_csv('/content/drive/MyDrive/OSS_Project2/2019_kbo_for_kaggle_v2.csv')

print("the top 10 players in hits in 2015")
year_2015 = data[data['year'] == 2015]
top10_H_2015 = year_2015.sort_values('H', ascending=False).head(10)
print(top10_H_2015.loc[:, ['batter_name', 'H']])

print()

print("the top 10 players in batting average in 2015")
year_2015 = data[data['year'] == 2015]
top10_avg_2015 = year_2015.sort_values('avg', ascending=False).head(10)
print(top10_avg_2015.loc[:, ['batter_name', 'avg']])

print()

print("the top 10 players in homerun in 2015")
year_2015 = data[data['year'] == 2015]
top10_HR_2015 = year_2015.sort_values('HR', ascending=False).head(10)
print(top10_HR_2015.loc[:, ['batter_name', 'HR']])

print()

print("the top 10 players in on-base percentage in 2015")
year_2015 = data[data['year'] == 2015]
top10_OBP_2015 = year_2015.sort_values('OBP', ascending=False).head(10)
print(top10_OBP_2015.loc[:, ['batter_name', 'OBP']])

print("the top 10 players in hits in 2016")
year_2016 = data[data['year'] == 2016]
top10_H_2016 = year_2016.sort_values('H', ascending=False).head(10)
print(top10_H_2016.loc[:, ['batter_name', 'H']])

print()

print("the top 10 players in batting average in 2016")
year_2016 = data[data['year'] == 2016]
top10_avg_2016 = year_2016.sort_values('avg', ascending=False).head(10)
print(top10_avg_2016.loc[:, ['batter_name', 'avg']])

print()

print("the top 10 players in homerun in 2016")
year_2016 = data[data['year'] == 2016]
top10_HR_2016 = year_2016.sort_values('HR', ascending=False).head(10)
print(top10_HR_2016.loc[:, ['batter_name', 'HR']])

print()

print("the top 10 players in on-base percentage in 2016")
year_2016 = data[data['year'] == 2016]
top10_OBP_2016 = year_2016.sort_values('OBP', ascending=False).head(10)
print(top10_OBP_2016.loc[:, ['batter_name', 'OBP']])

print("the top 10 players in hits in 2017")
year_2017 = data[data['year'] == 2017]
top10_H_2017 = year_2017.sort_values('H', ascending=False).head(10)
print(top10_H_2017.loc[:, ['batter_name', 'H']])

print()

print("the top 10 players in batting average in 2017")
year_2017 = data[data['year'] == 2017]
top10_avg_2017 = year_2017.sort_values('avg', ascending=False).head(10)
print(top10_avg_2017.loc[:, ['batter_name', 'avg']])

print()

print("the top 10 players in homerun in 2017")
year_2017 = data[data['year'] == 2017]
top10_HR_2017 = year_2017.sort_values('HR', ascending=False).head(10)
print(top10_HR_2017.loc[:, ['batter_name', 'HR']])

print()

print("the top 10 players in on-base percentage in 2017")
year_2017 = data[data['year'] == 2017]
top10_OBP_2017 = year_2017.sort_values('OBP', ascending=False).head(10)
print(top10_OBP_2017.loc[:, ['batter_name', 'OBP']])

print("the top 10 players in hits in 2018")
year_2018 = data[data['year'] == 2018]
top10_H_2018 = year_2018.sort_values('H', ascending=False).head(10)
print(top10_H_2018.loc[:, ['batter_name', 'H']])

print()

print("the top 10 players in batting average in 2018")
year_2018 = data[data['year'] == 2018]
top10_avg_2018 = year_2018.sort_values('avg', ascending=False).head(10)
print(top10_avg_2018.loc[:, ['batter_name', 'avg']])

print()

print("the top 10 players in homerun in 2018")
year_2018 = data[data['year'] == 2018]
top10_HR_2018 = year_2018.sort_values('HR', ascending=False).head(10)
print(top10_HR_2018.loc[:, ['batter_name', 'HR']])

print()

print("the top 10 players in on-base percentage in 2018")
year_2018 = data[data['year'] == 2018]
top10_OBP_2018 = year_2018.sort_values('OBP', ascending=False).head(10)
print(top10_OBP_2018.loc[:, ['batter_name', 'OBP']])

year_2018 = data[data['year'] == 2018]
positions = year_2018['cp'].unique()

for catcher in positions:
  catcher = year_2018[year_2018['cp'] == '포수']
  the_highest_war = catcher['war'].idxmax()
  catcher_player = catcher.loc[the_highest_war, ['batter_name', 'cp']]
print(catcher_player)

print()

for first_baseman in positions:
  first_baseman = year_2018[year_2018['cp'] == '1루수']
  the_highest_war = first_baseman['war'].idxmax()
  first_baseman_player = first_baseman.loc[the_highest_war, ['batter_name', 'cp']]
print(first_baseman_player)

print()

for second_baseman in positions:
  second_baseman = year_2018[year_2018['cp'] == '2루수']
  the_highest_war = second_baseman['war'].idxmax()
  second_baseman_player = second_baseman.loc[the_highest_war, ['batter_name', 'cp']]
print(second_baseman_player)

print()

for third_baseman in positions:
  third_baseman = year_2018[year_2018['cp'] == '3루수']
  the_highest_war = third_baseman['war'].idxmax()
  third_baseman_player = third_baseman.loc[the_highest_war, ['batter_name', 'cp']]
print(third_baseman_player)

print()

for shortstop in positions:
  shortstop = year_2018[year_2018['cp'] == '유격수']
  the_highest_war = shortstop['war'].idxmax()
  shortstop_player = shortstop.loc[the_highest_war, ['batter_name', 'cp']]
print(shortstop_player)

print()

for left_fielder in positions:
  left_fielder = year_2018[year_2018['cp'] == '좌익수']
  the_highest_war = left_fielder['war'].idxmax()
  left_fielder_player = left_fielder.loc[the_highest_war, ['batter_name', 'cp']]
print(left_fielder_player)

print()

for center_fielder in positions:
  center_fielder = year_2018[year_2018['cp'] == '중견수']
  the_highest_war = center_fielder['war'].idxmax()
  center_fielder_player = center_fielder.loc[the_highest_war, ['batter_name', 'cp']]
print(center_fielder_player)

print()

for right_fielder in positions:
  right_fielder = year_2018[year_2018['cp'] == '우익수']
  the_highest_war = right_fielder['war'].idxmax()
  right_fielder_player = right_fielder.loc[the_highest_war, ['batter_name', 'cp']]
print(right_fielder_player)

R_corr = data['salary'].corr(data['R'])
H_corr = data['salary'].corr(data['H'])
HR_corr = data['salary'].corr(data['HR'])
RBI_corr = data['salary'].corr(data['RBI'])
SB_corr = data['salary'].corr(data['SB'])
war_corr = data['salary'].corr(data['war'])
avg_corr = data['salary'].corr(data['avg'])
OBP_corr = data['salary'].corr(data['OBP'])
SLG_corr = data['salary'].corr(data['SLG'])

correlations = {
    'R' : R_corr,
    'H' : H_corr,
    'HR' : HR_corr,
    'RBI' : RBI_corr,
    'SB' : SB_corr,
    'war' : war_corr,
    'avg' : avg_corr,
    'OBP' : OBP_corr,
    'SLG' : SLG_corr
}
the_highest_correlation = max(correlations, key=correlations.get)
the_highest_correlation_value = correlations[the_highest_correlation]
the_highest_correlation, the_highest_correlation_value